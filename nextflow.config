/*
 * This is the assembly.config file. Here are the required parameters in order to execute the
 * assembly.nextflow pipeline. It is important to keep in mind that some parameters are incompatible
 * with each other such as: params.shortreads.paired and params.shortreads.single. These type of parameters
 * can have some empty values.
 */

/*
 * Long reads input files. Just needed to be specified in case of hybrid or longreads-only assembly.
 * If none of these are wanted it may be left in blank. Fast5 path (set the path to the directory containing
 * the fast5 files) are needed to perform the polish step with nanopolish (Used with Canu software). Also, it
 * is important to keep in mind that, nanopolish only works with long reads in FASTA format, not in FASTQ.
 * In order to use nanopolish, the user might give the directory path to the FAST5 files and the full path to
 * the FASTA file (the pipeline checks the format, and, if in FASTQ, it converts to FASTA).
 */
params.longreads = '' // Already extracted in fasta or fastq
/*
 * This parameter loads the directory where all the nanopore FAST5 files are stored.
 * If this parameter, the pipeline is able to execute the polishing step with nanopolish
 * for longreads-only assembly type.
 */
params.fast5Path = ''
/*
 * This parameter loads all the *.bax.h5 pacbio raw files are stored.
 * In order to nextflow properly use it, one needs to store all the data, from all the cells
 * in one single directory (even in links) and show the filepath with "path/to/*bax.h5" to this parameter.
 */
params.pacbio_all_baxh5_path = ''
/*
 * This parameter loads all the subreads *.bam pacbio raw files are stored.
 * In order to nextflow properly use it, one needs to store all the data, from all the cells
 * in one single directory (even in links) and show the filepath with "path/to/*bam" to this parameter.
 */
params.pacbio_all_bam_path = ''
/*
 * This parameter is used to specify the long read sequencing technology used.
 * It might be set as one of both: nanopore ; pacbio
 * If no long read is used, it is not needed.
 */
params.lr_type = ''
/*
 * Short reads input files. They need to be specified in case of hybrid or shortreads-only assembly.
 * If none of these are wnated it may be left in blank. The files might be single or paired ended. They just
 * need to be properly identified as the examples below.
 * Examples for illumina reads:
 * Paired: params.shortreads.paired = 'SRR6307304_{1,2}.fastq'
 * Single: params.shortreads.single = 'SRR7128258*'
 */
params.shortreads_paired = ''
params.shortreads_single = ''
/*
 * Parameter for reference genome. It is not required and just used in Spades assembly pipeline.
 * It may be left in blank.
 */
params.ref_genome = ''
/*
 * Here we chose the assembly type wanted. This is required to perform the assembly type wanted.
 * It must be set as one of these posibilities: longreads-only ; hybrid ; illumina-only
 */
params.assembly_type = ''
/*
 * This parameter below is to define wheter the user wants or not to polish its long reads only
 * assembly with illumina short reads in the end. This, only works with long reads only assemblies.
 */
params.illumina_polish_longreads_contigs = false
/*
 * Whenever polishing long reads only assemblies with unpaired short reads (single end), the pipeline
 * will directly execute one round of pilon polishing instead of using Unicycler's polish pipeline.
 * Therefore we need to allocate the amount of memmory allocated by Pilon.
 * Defaut 50G.
 * This step is crucial because with not enough memmory will crash and not correct your assembly.
 * When that happens you will not have the pilon output nor the QUAST assesment.
 */
params.pilon_memmory_limit = 50
/*
 * Here it is set the software wanted to perform the assembly with.
 * It must be set as true to use the software and false to skip it.
 */
params.try_canu = false
params.try_unicycler = false
params.try_flye = false
params.try_spades = false
/*
 * This parameter only needs to be set if the software chosen is Canu.
 * This is a required option for Canu to run.
 * It is an estimate of the size of the genome. Common suffices are allowed, for example, 3.7m or 2.8g.
 * This shall also be applied to Flye Assembler.
 */
params.genomeSize = ''
/*
 * Here are some other parameters that do not drastically influence the workflow.
 */
//Output folder name
params.outDir = 'output'
//Prefix for output files
params.prefix = 'out'
//Number of threads to be used by each software.
params.threads = 4
//Number of cores to run nanopolish in parallel
params.cpus = 2
//Path to the ?.yaml file containing additional parameters for the software.
params.yaml = ''


/*
 * Selecting wanted Nextflow reports
 * They tell you more about the pipeline execution
 * Memory, Running time, etc.
 */

//Trace Report
trace {
    enabled = false
    file = "${params.outDir}" + "/annotation_pipeline_trace.txt"
    fields = 'task_id,name,status,exit,realtime,cpus,%cpu,memory,%mem,rss'
}
//Timeline Report
timeline {
    enabled = false
    file = "${params.outDir}" + "/annotation_pipeline_timeline.html"
}

//Complete Report
report {
    enabled = false
    file = "${params.outDir}" + "/annotation_pipeline_nextflow_report.html"
}






/*
 * Configuring Nextflow and Docker Scopes.
 * Do NOT change any of the following
 */

//Queue limit
executor.$local.queueSize = 1

//Docker usage
docker.enabled = true
docker.runOptions = '-u $(id -u):root'
