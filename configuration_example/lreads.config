/*
 * Configuration File to run fmalmeida/MpGAP pipeline.
 */

/*
 * Customizable parameters
 */
params {

                /*
                 * General parameters
                 */

// Output folder name
      outdir = 'output'

// Number of threads to be used by each software.
      threads = 3

// Number of jobs to run in parallel. Be aware that each job (in parallel) can consume
// N threads (set above). Be sure to carefully check your resources before augmenting
// this parameter. For example: parallel_jobs = 2 + threads = 5 can consume until 10
// threads at once.
      parallel_jobs = 1

                /*
                 * NF tower setup parameters
                 */

      use_tower   = false
      tower_token = ''

/*
 * Here we chose the assembly type wanted. This is required.
 * It must be set as one of these posibilities: longreads-only ; hybrid ; illumina-only
 */
      assembly_type = 'longreads-only'

/*
 * Here it is set the software wanted to perform the assembly with.
 * It must be set as true to use the software and false to skip it.
 */
      try_canu      = false
      canu_additional_parameters = '' // Must be given as shown in Canu manual. E.g. 'correctedErrorRate=0.075 corOutCoverage=200'
      try_unicycler = false
      unicycler_additional_parameters = '' // Must be given as shown in Unicycler manual. E.g. '--mode conservative --no_correct'
      try_flye      = false
      flye_additional_parameters = '' // Must be given as shown in Flye manual. E.g. '--meta --iterations 4'

/*
 * This parameter only needs to be set if the software chosen is Canu or Flye.
 * It is an estimate of the size of the genome. Common suffices are allowed, for example, 3.7m or 2.8g
 */
      genomeSize = ''

                /*
                 * Long reads parameters
                 */

/*
 * Long reads input files. Just needed to be specified in case of hybrid or longreads-only assembly.
 * If none of these are wanted it may be left in blank.
 */
      longreads = '' // Already extracted in fasta or fastq

/*
 * This parameter is used to specify the long read sequencing technology used.
 * It might be set as one of both: nanopore ; pacbio
 */
      lr_type = ''


/*
 * Tells Medaka polisher which model to use according to the basecaller used.
 * For example the model named r941_min_fast_g303 should be used with data from
 * MinION (or GridION) R9.4.1 flowcells using the fast Guppy basecaller version 3.0.3.
 *
 * Where a version of Guppy has been used without an exactly corresponding medaka model,
 * the medaka model with the highest version equal to or less than the guppy version
 * should be selected. Models available: r941_min_fast_g303, r941_min_high_g303,
 * r941_min_high_g330, r941_min_high_g344, r941_prom_fast_g303, r941_prom_high_g303,
 * r941_prom_high_g344, r941_prom_high_g330, r10_min_high_g303, r10_min_high_g340,
 * r103_min_high_g345, r941_prom_snp_g303, r941_prom_variant_g303, r941_min_high_g340_rle.
 *
 * If left in blank, medaka will not be executed.
 */
      medaka_sequencing_model = ''

/*
 * The polishing step is performed (and advised) with Medaka (--sequencing_model parameter).
 * This parameter tells the pipeline to also try Nanopolish.
 *
 * This parameter loads the directory where all the nanopore FAST5 files are stored.
 * If this parameter is set, the pipeline is able to execute the polishing step with nanopolish.
 */
      nanopolish_fast5Path = ''

/*
 * This parameter sets to nanopolish the max number of haplotypes to be considered.
 * Sometimes the pipeline may crash because to much variation was found exceeding the
 * limit. Try augmenting this value (Default: 1000)
 */
      nanopolish_max_haplotypes = 1000

//Number of cores to run nanopolish in parallel
//Beware of your system limits
      cpus = 2

/*
 * This parameter loads all the subreads *.bam pacbio raw files for polishing with VariantCaller.
 * In order to nextflow properly use it, one needs to store all the data, from all the cells
 * in one single directory and set the filepath as "some/data/*bam".
 */
      pacbio_all_bam_path = ''

}

/*
 * Configuring Nextflow reports
 */

//Trace Report
trace {
    enabled = false
    file = "${params.outdir}" + "/annotation_pipeline_trace.txt"
    fields = 'task_id,name,status,exit,realtime,cpus,%cpu,memory,%mem,rss'
}
//Timeline Report
timeline {
    enabled = false
    file = "${params.outdir}" + "/annotation_pipeline_timeline.html"
}

//Complete Report
report {
    enabled = false
    file = "${params.outdir}" + "/annotation_pipeline_nextflow_report.html"
}

/*
                      Setting NF tower configurations
*/
if (params.use_tower) {
env.TOWER_ACCESS_TOKEN = params.tower_token
tower {
    accessToken = params.tower_token
    enabled = params.use_tower
}
}

/*
 * Configuring Nextflow Scopes.
 * Do NOT change any of the following
 */

// Queue limit
if (params.parallel_jobs) {
  executor.$local.queueSize = params.parallel_jobs
} else {
  executor.$local.queueSize = 1
}

// Docker permissions
docker {
  enabled = true
  runOptions = '-u $(id -u):root'
}
